package com.example.madcampproj1.tab

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
//import androidx.compose.material3.Divider
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

import androidx.compose.material3.HorizontalDivider

import android.content.Context
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
//import android.content.Context
import androidx.compose.runtime.*
import androidx.compose.ui.platform.LocalContext

import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.foundation.lazy.itemsIndexed

import androidx.compose.foundation.clickable
//import androidx.compose.foundation.layout.*
//import androidx.compose.foundation.lazy.LazyColumn
//import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.material3.Checkbox
//import androidx.compose.material3.Text
//import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
//import androidx.compose.ui.Modifier
//import androidx.compose.ui.unit.dp


//@Composable
//fun ListTabContent() {
//    // ÌïòÎìúÏΩîÎî©Îêú ÏÉòÌîå ÏïÑÏù¥ÌÖú
//    val itemList = listOf(
//        "ÏÇ¨Í≥º",
//        "Î∞îÎÇòÎÇò",
//        "Ï≤¥Î¶¨",
//        "Îî∏Í∏∞",
//        "ÏàòÎ∞ï",
//        "Ìè¨ÎèÑ",
//        "Î≥µÏà≠ÏïÑ",
//        "Î†àÎ™¨"
//    )
//
//    LazyColumn(
//        modifier = Modifier
//            .fillMaxSize()
//            .padding(16.dp)
//    ) {
//        items(itemList) { item ->
//            Column(modifier = Modifier.padding(vertical = 8.dp)) {
//                Text(
//                    text = item,
//                    style = MaterialTheme.typography.bodyLarge
//                )
//                HorizontalDivider(modifier = Modifier.padding(top = 8.dp))
//            }
//        }
//    }
//}

//@Composable
//fun ListTabContent() {
//    val itemList = listOf(
//        "ÏÇ¨Í≥º", "Î∞îÎÇòÎÇò", "Ï≤¥Î¶¨", "Îî∏Í∏∞", "ÏàòÎ∞ï", "Ìè¨ÎèÑ", "Î≥µÏà≠ÏïÑ", "Î†àÎ™¨"
//    )
//
//    LazyColumn(
//        modifier = Modifier
//            .fillMaxSize()
//            .padding(16.dp),
//        verticalArrangement = Arrangement.spacedBy(8.dp) // ‚Üê Ïó¨Í∏∞Í∞Ä ÌïµÏã¨!
//    ) {
//        items(itemList) { item ->
//            Column {
//                Text(
//                    text = item,
//                    style = MaterialTheme.typography.bodyLarge
//                )
//                HorizontalDivider()
//            }
//        }
//    }
//}

//data class Place(
//    val name: String,
//    val category: String,
//    val address: String
//)
//
//fun loadPlacesFromAssets(context: Context): List<Place> {
//    val jsonString = context.assets.open("sample_data.json")
//        .bufferedReader()
//        .use { it.readText() }
//
//    val gson = Gson()
//    val listType = object : TypeToken<List<Place>>() {}.type
//    return gson.fromJson(jsonString, listType)
//}
//
//@Composable
//fun ListTabContent() {
//    val context = LocalContext.current
//    val placeList by remember {
//        mutableStateOf(loadPlacesFromAssets(context))
//    }
//
//    LazyColumn(
//        modifier = Modifier
//            .fillMaxSize()
//            .padding(16.dp),
//        verticalArrangement = Arrangement.spacedBy(8.dp),
//        contentPadding = PaddingValues(bottom = 80.dp) // üëà ÌïòÎã® Ïó¨Î∞± Ï∂îÍ∞Ä!
//    ) {
//        items(placeList) { place ->
//            Column {
//                Text(text = place.name, style = MaterialTheme.typography.titleMedium)
//                Text(text = place.category)
//                Text(text = place.address)
//                HorizontalDivider()
//            }
//        }
//    }
//}

//data class Ingredient(
//    val name: String
//    // val category: String? = null,      // ÌïÑÏöîÌïú Í≤ΩÏö∞ ÏÇ¨Ïö©
//    // val storage: String? = null        // Ïòà: ÎÉâÏû•, ÎÉâÎèô, Ïã§Ïò® Îì±
//)
//
//fun loadIngredientsFromAssets(context: Context): List<Ingredient> {
//    val jsonString = context.assets.open("ingredients.json")
//        .bufferedReader()
//        .use { it.readText() }
//
//    val gson = Gson()
//    val listType = object : TypeToken<List<Ingredient>>() {}.type
//    return gson.fromJson(jsonString, listType)
//}
//
//@Composable
//fun ListTabContent() {
//    val context = LocalContext.current
//    val ingredientList by remember {
//        mutableStateOf(loadIngredientsFromAssets(context))
//    }
//
//    LazyColumn(
//        modifier = Modifier
//            .fillMaxSize()
//            .padding(16.dp),
//        verticalArrangement = Arrangement.spacedBy(8.dp),
//        contentPadding = PaddingValues(bottom = 80.dp)
//    ) {
//        items(ingredientList) { ingredient ->
//            Column {
//                Text(text = ingredient.name, style = MaterialTheme.typography.titleMedium)
//                HorizontalDivider()
//            }
//        }
//    }
//}

fun loadIngredientsFromAssets(context: Context): List<Ingredient> {
    val jsonString = context.assets.open("ingredients.json")
        .bufferedReader().use { it.readText() }

    val gson = Gson()
    val listType = object : TypeToken<List<Ingredient>>() {}.type
    return gson.fromJson(jsonString, listType)
}

data class Ingredient(val name: String, var isChecked: Boolean)


@Composable
fun ListTabContent() {
    val context = LocalContext.current

    var ingredients by remember { mutableStateOf<List<Ingredient>>(emptyList()) }

    // Ï≤òÏùå 1ÌöåÎßå JSON Î°úÎìú
    LaunchedEffect(Unit) {
        ingredients = loadIngredientsFromAssets(context)
    }

    LazyColumn {
        itemsIndexed(ingredients) { index, item ->
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable {
                        ingredients = ingredients.toMutableList().also {
                            it[index] = it[index].copy(isChecked = !it[index].isChecked)
                        }
                    }
                    .padding(16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = item.name,
                    modifier = Modifier.weight(1f)
                )
                Checkbox(
                    checked = item.isChecked,
                    onCheckedChange = { isChecked ->
                        ingredients = ingredients.toMutableList().also {
                            it[index] = it[index].copy(isChecked = isChecked)
                        }
                    }
                )
            }
        }
    }
}

//@Composable
//fun ListTabContent() {
//    // ‚úÖ rememberSaveableÎ°ú Ï≤¥ÌÅ¨ ÏÉÅÌÉúÎ•º Ï†ÄÏû•
//    var ingredients by rememberSaveable {
//        mutableStateOf(
//            listOf(
//                Ingredient("Í≥ÑÎûÄ", false),
//                Ingredient("Ïö∞Ïú†", false),
//                Ingredient("ÏπòÏ¶à", false),
//                Ingredient("Ïä§Ìå∏", false),
//                Ingredient("Ï∞∏ÏπòÏ∫î", false),
//                Ingredient("ÏÜåÏãúÏßÄ", false),
//                Ingredient("ÎëêÎ∂Ä", false),
//                Ingredient("Î∞•", false),
//                Ingredient("ÏñëÌåå", false),
//                Ingredient("ÎåÄÌåå", false),
//                Ingredient("ÎãπÍ∑º", false),
//                Ingredient("Í∞êÏûê", false),
//                Ingredient("ÍπÄÏπò", false),
//                Ingredient("Ï≤≠ÏñëÍ≥†Ï∂î / ÏùºÎ∞òÍ≥†Ï∂î", false),
//                Ingredient("ÏÉÅÏ∂î", false),
//                Ingredient("ÏñëÎ∞∞Ï∂î", false),
//                Ingredient("ÌåΩÏù¥Î≤ÑÏÑØ", false),
//                Ingredient("ÎäêÌÉÄÎ¶¨Î≤ÑÏÑØ / ÏñëÏÜ°Ïù¥Î≤ÑÏÑØ", false),
//                Ingredient("ÏÇ¨Í≥ºÏÇ¨", false)
//            )
//        )
//    }
//
//    LazyColumn {
//        itemsIndexed(ingredients) { index, item ->
//            Row(
//                modifier = Modifier
//                    .fillMaxWidth()
//                    .clickable {
//                        // ‚úÖ ÌÅ¥Î¶≠ÌïòÎ©¥ Ï≤¥ÌÅ¨ ÏÉÅÌÉú ÌÜ†Í∏Ä
//                        ingredients = ingredients.toMutableList().also {
//                            it[index] = it[index].copy(isChecked = !it[index].isChecked)
//                        }
//                    }
//                    .padding(16.dp),
//                verticalAlignment = Alignment.CenterVertically
//            ) {
//                Text(
//                    text = item.name,
//                    modifier = Modifier.weight(1f)
//                )
//                Checkbox(
//                    checked = item.isChecked,
//                    onCheckedChange = { isChecked ->
//                        ingredients = ingredients.toMutableList().also {
//                            it[index] = it[index].copy(isChecked = isChecked)
//                        }
//                    }
//                )
//            }
//        }
//    }
//}
